from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import os

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ID (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞‡¶ü‡¶æ ‡¶¶‡¶ø‡¶®)
ADMIN_ID = 6796353433  # <-- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶á‡¶°‡¶ø

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ
user_data = {}
today_code = ""  # ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡ßã‡¶°
DAILY_TAP_LIMIT = 5000
COINS_PER_TAP = 5
WATCH_REWARD = 5000

def today_str():
    return datetime.utcnow().strftime("%Y-%m-%d")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ SA Tap ‡¶¨‡¶ü‡ßá! ‡¶Ü‡ßü ‡¶ï‡¶∞‡¶§‡ßá /tap ‡¶Ö‡¶•‡¶¨‡¶æ /watch <code> ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def tap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = today_str()
    user = user_data.setdefault(user_id, {"tap": {}, "coins": 0, "watched": {}})
    taps = user["tap"].get(today, 0)

    if taps * COINS_PER_TAP >= DAILY_TAP_LIMIT:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑‡•§ ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶∏‡ßÅ‡¶®‡•§")
        return

    user["tap"][today] = taps + 1
    user["coins"] += COINS_PER_TAP
    await update.message.reply_text(f"‚úÖ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡¶´‡¶≤! ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡ßá‡¶®: {user['coins']}")

async def watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global today_code
    user_id = update.effective_user.id
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®: /watch <code>")
        return
    code = context.args[0]
    user = user_data.setdefault(user_id, {"tap": {}, "coins": 0, "watched": {}})
    today = today_str()

    if user["watched"].get(today):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßá‡¶õ‡ßá‡¶®‡•§")
        return

    if code == today_code:
        user["coins"] += WATCH_REWARD
        user["watched"][today] = True
        await update.message.reply_text(f"üéâ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßã‡¶°! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßá‡¶≤‡ßá‡¶® {WATCH_REWARD} ‡¶ï‡ßü‡ßá‡¶®‡•§ ‡¶Æ‡ßã‡¶ü: {user['coins']}")
    else:
        await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡ßã‡¶°‡•§")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = user_data.get(user_id, {"coins": 0})
    await update.message.reply_text(f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡ßá‡¶®: {user['coins']}")

async def setcode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global today_code
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
        return
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®: /setcode <new_code>")
        return
    today_code = context.args[0]
    await update.message.reply_text(f"‚úÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {today_code}")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ
if __name__ == "__main__":
    TOKEN = "7932269020:AAHgy13mzJRJ3fx-FE9j9IyISVoV6LC0Rk4"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tap", tap))
    app.add_handler(CommandHandler("watch", watch))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("setcode", setcode))  # Admin only

    print("‚úÖ Bot is running...")
    app.run_polling()
