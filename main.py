from datetime import datetime, timezone
import os

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# üõÇ  Admin Telegram user-id
ADMIN_ID = 6796353433          # <-- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®

# üéÆ  ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú (RAM-‡¶è, ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá)
user_data = {}
today_code = ""

# üìä  ‡¶ï‡¶®‡¶´‡¶ø‡¶ó
DAILY_TAP_LIMIT = 5_000        # ‡¶è‡¶ï ‡¶¶‡¶ø‡¶®‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ï‡ßü‡ßá‡¶®
COINS_PER_TAP   = 5            # ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶ï‡ßü‡ßá‡¶®
WATCH_REWARD    = 5_000        # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ï‡ßü‡ßá‡¶®

# ---------- ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ----------
def today_str() -> str:
    """UTC ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡•§"""
    return datetime.now(timezone.utc).strftime("%Y-%m-%d")


# ---------- ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ **SA Tap**-‡¶è!\n"
        "‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡¶§‡ßá `/tap`‚ÄÉ\n"
        "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßá ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶™‡ßá‡¶§‡ßá `/watch <code>`\n"
        "‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá `/balance`",
        parse_mode="Markdown",
    )


async def tap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today   = today_str()

    user = user_data.setdefault(user_id, {"tap": {}, "coins": 0, "watched": {}})
    taps = user["tap"].get(today, 0)

    if taps * COINS_PER_TAP >= DAILY_TAP_LIMIT:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™-‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑‡•§ ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    user["tap"][today] = taps + 1
    user["coins"] += COINS_PER_TAP
    await update.message.reply_text(f"‚úÖ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ó‡ßÉ‡¶π‡ßÄ‡¶§! ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡ßá‡¶®: {user['coins']}")


async def watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global today_code

    user_id = update.effective_user.id
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: `/watch <code>`", parse_mode="Markdown")
        return

    code  = context.args[0]
    today = today_str()

    user = user_data.setdefault(user_id, {"tap": {}, "coins": 0, "watched": {}})

    if user["watched"].get(today):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì-‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§")
        return

    if code == today_code:
        user["coins"] += WATCH_REWARD
        user["watched"][today] = True
        await update.message.reply_text(
            f"üéâ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßã‡¶°! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßá‡¶≤‡ßá‡¶® {WATCH_REWARD} ‡¶ï‡ßü‡ßá‡¶®‡•§ ‡¶Æ‡ßã‡¶ü: {user['coins']}"
        )
    else:
        await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡ßã‡¶°‡•§")


async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    coins   = user_data.get(user_id, {}).get("coins", 0)
    await update.message.reply_text(f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡ßá‡¶®: {coins}")


async def setcode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global today_code

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
        return
    if len(context.args) != 1:
        await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/setcode <code>`", parse_mode="Markdown")
        return

    today_code = context.args[0]
    await update.message.reply_text(f"‚úÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: `{today_code}`", parse_mode="Markdown")


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡¶æ‡¶§ ‡ßß‡ß®‡¶ü‡¶æ‡¶Ø‡¶º (‡¶¨‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡¶æ‡¶á‡¶≤‡ßá) ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡•§"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
        return

    today = today_str()
    for u in user_data.values():
        u["tap"][today]      = 0
        u["watched"][today]  = False
    await update.message.reply_text("üîÑ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")


# ---------- ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ----------
if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise RuntimeError("‚ö†Ô∏è ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂-‡¶ö‡ßá‡¶û‡ßç‡¶ú‡ßá BOT_TOKEN ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start",    start))
    app.add_handler(CommandHandler("tap",      tap))
    app.add_handler(CommandHandler("watch",    watch))
    app.add_handler(CommandHandler("balance",  balance))
    app.add_handler(CommandHandler("setcode",  setcode))
    app.add_handler(CommandHandler("reset",    reset))

    print("ü§ñ SA Tap Bot is running‚Ä¶")
    app.run_polling()
